/*
Lidarr

Lidarr API docs

API version: v2.4.3.4248
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lidarr

import (
	"encoding/json"
)

// checks if the ArtistTitleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtistTitleInfo{}

// ArtistTitleInfo struct for ArtistTitleInfo
type ArtistTitleInfo struct {
	Title NullableString `json:"title,omitempty"`
	TitleWithoutYear NullableString `json:"titleWithoutYear,omitempty"`
	Year *int32 `json:"year,omitempty"`
}

// NewArtistTitleInfo instantiates a new ArtistTitleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtistTitleInfo() *ArtistTitleInfo {
	this := ArtistTitleInfo{}
	return &this
}

// NewArtistTitleInfoWithDefaults instantiates a new ArtistTitleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtistTitleInfoWithDefaults() *ArtistTitleInfo {
	this := ArtistTitleInfo{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArtistTitleInfo) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtistTitleInfo) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *ArtistTitleInfo) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *ArtistTitleInfo) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *ArtistTitleInfo) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *ArtistTitleInfo) UnsetTitle() {
	o.Title.Unset()
}

// GetTitleWithoutYear returns the TitleWithoutYear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArtistTitleInfo) GetTitleWithoutYear() string {
	if o == nil || IsNil(o.TitleWithoutYear.Get()) {
		var ret string
		return ret
	}
	return *o.TitleWithoutYear.Get()
}

// GetTitleWithoutYearOk returns a tuple with the TitleWithoutYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtistTitleInfo) GetTitleWithoutYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TitleWithoutYear.Get(), o.TitleWithoutYear.IsSet()
}

// HasTitleWithoutYear returns a boolean if a field has been set.
func (o *ArtistTitleInfo) HasTitleWithoutYear() bool {
	if o != nil && o.TitleWithoutYear.IsSet() {
		return true
	}

	return false
}

// SetTitleWithoutYear gets a reference to the given NullableString and assigns it to the TitleWithoutYear field.
func (o *ArtistTitleInfo) SetTitleWithoutYear(v string) {
	o.TitleWithoutYear.Set(&v)
}
// SetTitleWithoutYearNil sets the value for TitleWithoutYear to be an explicit nil
func (o *ArtistTitleInfo) SetTitleWithoutYearNil() {
	o.TitleWithoutYear.Set(nil)
}

// UnsetTitleWithoutYear ensures that no value is present for TitleWithoutYear, not even an explicit nil
func (o *ArtistTitleInfo) UnsetTitleWithoutYear() {
	o.TitleWithoutYear.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *ArtistTitleInfo) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistTitleInfo) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *ArtistTitleInfo) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *ArtistTitleInfo) SetYear(v int32) {
	o.Year = &v
}

func (o ArtistTitleInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtistTitleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.TitleWithoutYear.IsSet() {
		toSerialize["titleWithoutYear"] = o.TitleWithoutYear.Get()
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	return toSerialize, nil
}

type NullableArtistTitleInfo struct {
	value *ArtistTitleInfo
	isSet bool
}

func (v NullableArtistTitleInfo) Get() *ArtistTitleInfo {
	return v.value
}

func (v *NullableArtistTitleInfo) Set(val *ArtistTitleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableArtistTitleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableArtistTitleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtistTitleInfo(val *ArtistTitleInfo) *NullableArtistTitleInfo {
	return &NullableArtistTitleInfo{value: val, isSet: true}
}

func (v NullableArtistTitleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtistTitleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


