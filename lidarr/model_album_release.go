/*
Lidarr

Lidarr API docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lidarr

import (
	"encoding/json"
	"time"
)

// AlbumRelease struct for AlbumRelease
type AlbumRelease struct {
	Id *int32 `json:"id,omitempty"`
	AlbumId *int32 `json:"albumId,omitempty"`
	ForeignReleaseId NullableString `json:"foreignReleaseId,omitempty"`
	OldForeignReleaseIds []*string `json:"oldForeignReleaseIds,omitempty"`
	Title NullableString `json:"title,omitempty"`
	Status NullableString `json:"status,omitempty"`
	Duration *int32 `json:"duration,omitempty"`
	Label []*string `json:"label,omitempty"`
	Disambiguation NullableString `json:"disambiguation,omitempty"`
	Country []*string `json:"country,omitempty"`
	ReleaseDate NullableTime `json:"releaseDate,omitempty"`
	Media []*Medium `json:"media,omitempty"`
	TrackCount *int32 `json:"trackCount,omitempty"`
	Monitored *bool `json:"monitored,omitempty"`
	Album *AlbumLazyLoaded `json:"album,omitempty"`
	Tracks *TrackListLazyLoaded `json:"tracks,omitempty"`
}

// NewAlbumRelease instantiates a new AlbumRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlbumRelease() *AlbumRelease {
	this := AlbumRelease{}
	return &this
}

// NewAlbumReleaseWithDefaults instantiates a new AlbumRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlbumReleaseWithDefaults() *AlbumRelease {
	this := AlbumRelease{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlbumRelease) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumRelease) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlbumRelease) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AlbumRelease) SetId(v int32) {
	o.Id = &v
}

// GetAlbumId returns the AlbumId field value if set, zero value otherwise.
func (o *AlbumRelease) GetAlbumId() int32 {
	if o == nil || isNil(o.AlbumId) {
		var ret int32
		return ret
	}
	return *o.AlbumId
}

// GetAlbumIdOk returns a tuple with the AlbumId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumRelease) GetAlbumIdOk() (*int32, bool) {
	if o == nil || isNil(o.AlbumId) {
    return nil, false
	}
	return o.AlbumId, true
}

// HasAlbumId returns a boolean if a field has been set.
func (o *AlbumRelease) HasAlbumId() bool {
	if o != nil && !isNil(o.AlbumId) {
		return true
	}

	return false
}

// SetAlbumId gets a reference to the given int32 and assigns it to the AlbumId field.
func (o *AlbumRelease) SetAlbumId(v int32) {
	o.AlbumId = &v
}

// GetForeignReleaseId returns the ForeignReleaseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetForeignReleaseId() string {
	if o == nil || isNil(o.ForeignReleaseId.Get()) {
		var ret string
		return ret
	}
	return *o.ForeignReleaseId.Get()
}

// GetForeignReleaseIdOk returns a tuple with the ForeignReleaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetForeignReleaseIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ForeignReleaseId.Get(), o.ForeignReleaseId.IsSet()
}

// HasForeignReleaseId returns a boolean if a field has been set.
func (o *AlbumRelease) HasForeignReleaseId() bool {
	if o != nil && o.ForeignReleaseId.IsSet() {
		return true
	}

	return false
}

// SetForeignReleaseId gets a reference to the given NullableString and assigns it to the ForeignReleaseId field.
func (o *AlbumRelease) SetForeignReleaseId(v string) {
	o.ForeignReleaseId.Set(&v)
}
// SetForeignReleaseIdNil sets the value for ForeignReleaseId to be an explicit nil
func (o *AlbumRelease) SetForeignReleaseIdNil() {
	o.ForeignReleaseId.Set(nil)
}

// UnsetForeignReleaseId ensures that no value is present for ForeignReleaseId, not even an explicit nil
func (o *AlbumRelease) UnsetForeignReleaseId() {
	o.ForeignReleaseId.Unset()
}

// GetOldForeignReleaseIds returns the OldForeignReleaseIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetOldForeignReleaseIds() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.OldForeignReleaseIds
}

// GetOldForeignReleaseIdsOk returns a tuple with the OldForeignReleaseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetOldForeignReleaseIdsOk() ([]*string, bool) {
	if o == nil || isNil(o.OldForeignReleaseIds) {
    return nil, false
	}
	return o.OldForeignReleaseIds, true
}

// HasOldForeignReleaseIds returns a boolean if a field has been set.
func (o *AlbumRelease) HasOldForeignReleaseIds() bool {
	if o != nil && isNil(o.OldForeignReleaseIds) {
		return true
	}

	return false
}

// SetOldForeignReleaseIds gets a reference to the given []string and assigns it to the OldForeignReleaseIds field.
func (o *AlbumRelease) SetOldForeignReleaseIds(v []*string) {
	o.OldForeignReleaseIds = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *AlbumRelease) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *AlbumRelease) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *AlbumRelease) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *AlbumRelease) UnsetTitle() {
	o.Title.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetStatus() string {
	if o == nil || isNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *AlbumRelease) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *AlbumRelease) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *AlbumRelease) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *AlbumRelease) UnsetStatus() {
	o.Status.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *AlbumRelease) GetDuration() int32 {
	if o == nil || isNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumRelease) GetDurationOk() (*int32, bool) {
	if o == nil || isNil(o.Duration) {
    return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *AlbumRelease) HasDuration() bool {
	if o != nil && !isNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *AlbumRelease) SetDuration(v int32) {
	o.Duration = &v
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetLabel() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetLabelOk() ([]*string, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *AlbumRelease) HasLabel() bool {
	if o != nil && isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given []string and assigns it to the Label field.
func (o *AlbumRelease) SetLabel(v []*string) {
	o.Label = v
}

// GetDisambiguation returns the Disambiguation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetDisambiguation() string {
	if o == nil || isNil(o.Disambiguation.Get()) {
		var ret string
		return ret
	}
	return *o.Disambiguation.Get()
}

// GetDisambiguationOk returns a tuple with the Disambiguation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetDisambiguationOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Disambiguation.Get(), o.Disambiguation.IsSet()
}

// HasDisambiguation returns a boolean if a field has been set.
func (o *AlbumRelease) HasDisambiguation() bool {
	if o != nil && o.Disambiguation.IsSet() {
		return true
	}

	return false
}

// SetDisambiguation gets a reference to the given NullableString and assigns it to the Disambiguation field.
func (o *AlbumRelease) SetDisambiguation(v string) {
	o.Disambiguation.Set(&v)
}
// SetDisambiguationNil sets the value for Disambiguation to be an explicit nil
func (o *AlbumRelease) SetDisambiguationNil() {
	o.Disambiguation.Set(nil)
}

// UnsetDisambiguation ensures that no value is present for Disambiguation, not even an explicit nil
func (o *AlbumRelease) UnsetDisambiguation() {
	o.Disambiguation.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetCountry() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetCountryOk() ([]*string, bool) {
	if o == nil || isNil(o.Country) {
    return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AlbumRelease) HasCountry() bool {
	if o != nil && isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []string and assigns it to the Country field.
func (o *AlbumRelease) SetCountry(v []*string) {
	o.Country = v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetReleaseDate() time.Time {
	if o == nil || isNil(o.ReleaseDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ReleaseDate.Get()
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetReleaseDateOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.ReleaseDate.Get(), o.ReleaseDate.IsSet()
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *AlbumRelease) HasReleaseDate() bool {
	if o != nil && o.ReleaseDate.IsSet() {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given NullableTime and assigns it to the ReleaseDate field.
func (o *AlbumRelease) SetReleaseDate(v time.Time) {
	o.ReleaseDate.Set(&v)
}
// SetReleaseDateNil sets the value for ReleaseDate to be an explicit nil
func (o *AlbumRelease) SetReleaseDateNil() {
	o.ReleaseDate.Set(nil)
}

// UnsetReleaseDate ensures that no value is present for ReleaseDate, not even an explicit nil
func (o *AlbumRelease) UnsetReleaseDate() {
	o.ReleaseDate.Unset()
}

// GetMedia returns the Media field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumRelease) GetMedia() []*Medium {
	if o == nil {
		var ret []*Medium
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumRelease) GetMediaOk() ([]*Medium, bool) {
	if o == nil || isNil(o.Media) {
    return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *AlbumRelease) HasMedia() bool {
	if o != nil && isNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []Medium and assigns it to the Media field.
func (o *AlbumRelease) SetMedia(v []*Medium) {
	o.Media = v
}

// GetTrackCount returns the TrackCount field value if set, zero value otherwise.
func (o *AlbumRelease) GetTrackCount() int32 {
	if o == nil || isNil(o.TrackCount) {
		var ret int32
		return ret
	}
	return *o.TrackCount
}

// GetTrackCountOk returns a tuple with the TrackCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumRelease) GetTrackCountOk() (*int32, bool) {
	if o == nil || isNil(o.TrackCount) {
    return nil, false
	}
	return o.TrackCount, true
}

// HasTrackCount returns a boolean if a field has been set.
func (o *AlbumRelease) HasTrackCount() bool {
	if o != nil && !isNil(o.TrackCount) {
		return true
	}

	return false
}

// SetTrackCount gets a reference to the given int32 and assigns it to the TrackCount field.
func (o *AlbumRelease) SetTrackCount(v int32) {
	o.TrackCount = &v
}

// GetMonitored returns the Monitored field value if set, zero value otherwise.
func (o *AlbumRelease) GetMonitored() bool {
	if o == nil || isNil(o.Monitored) {
		var ret bool
		return ret
	}
	return *o.Monitored
}

// GetMonitoredOk returns a tuple with the Monitored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumRelease) GetMonitoredOk() (*bool, bool) {
	if o == nil || isNil(o.Monitored) {
    return nil, false
	}
	return o.Monitored, true
}

// HasMonitored returns a boolean if a field has been set.
func (o *AlbumRelease) HasMonitored() bool {
	if o != nil && !isNil(o.Monitored) {
		return true
	}

	return false
}

// SetMonitored gets a reference to the given bool and assigns it to the Monitored field.
func (o *AlbumRelease) SetMonitored(v bool) {
	o.Monitored = &v
}

// GetAlbum returns the Album field value if set, zero value otherwise.
func (o *AlbumRelease) GetAlbum() AlbumLazyLoaded {
	if o == nil || isNil(o.Album) {
		var ret AlbumLazyLoaded
		return ret
	}
	return *o.Album
}

// GetAlbumOk returns a tuple with the Album field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumRelease) GetAlbumOk() (*AlbumLazyLoaded, bool) {
	if o == nil || isNil(o.Album) {
    return nil, false
	}
	return o.Album, true
}

// HasAlbum returns a boolean if a field has been set.
func (o *AlbumRelease) HasAlbum() bool {
	if o != nil && !isNil(o.Album) {
		return true
	}

	return false
}

// SetAlbum gets a reference to the given AlbumLazyLoaded and assigns it to the Album field.
func (o *AlbumRelease) SetAlbum(v AlbumLazyLoaded) {
	o.Album = &v
}

// GetTracks returns the Tracks field value if set, zero value otherwise.
func (o *AlbumRelease) GetTracks() TrackListLazyLoaded {
	if o == nil || isNil(o.Tracks) {
		var ret TrackListLazyLoaded
		return ret
	}
	return *o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumRelease) GetTracksOk() (*TrackListLazyLoaded, bool) {
	if o == nil || isNil(o.Tracks) {
    return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *AlbumRelease) HasTracks() bool {
	if o != nil && !isNil(o.Tracks) {
		return true
	}

	return false
}

// SetTracks gets a reference to the given TrackListLazyLoaded and assigns it to the Tracks field.
func (o *AlbumRelease) SetTracks(v TrackListLazyLoaded) {
	o.Tracks = &v
}

func (o AlbumRelease) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.AlbumId) {
		toSerialize["albumId"] = o.AlbumId
	}
	if o.ForeignReleaseId.IsSet() {
		toSerialize["foreignReleaseId"] = o.ForeignReleaseId.Get()
	}
	if o.OldForeignReleaseIds != nil {
		toSerialize["oldForeignReleaseIds"] = o.OldForeignReleaseIds
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if !isNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Disambiguation.IsSet() {
		toSerialize["disambiguation"] = o.Disambiguation.Get()
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.ReleaseDate.IsSet() {
		toSerialize["releaseDate"] = o.ReleaseDate.Get()
	}
	if o.Media != nil {
		toSerialize["media"] = o.Media
	}
	if !isNil(o.TrackCount) {
		toSerialize["trackCount"] = o.TrackCount
	}
	if !isNil(o.Monitored) {
		toSerialize["monitored"] = o.Monitored
	}
	if !isNil(o.Album) {
		toSerialize["album"] = o.Album
	}
	if !isNil(o.Tracks) {
		toSerialize["tracks"] = o.Tracks
	}
	return json.Marshal(toSerialize)
}

type NullableAlbumRelease struct {
	value *AlbumRelease
	isSet bool
}

func (v NullableAlbumRelease) Get() *AlbumRelease {
	return v.value
}

func (v *NullableAlbumRelease) Set(val *AlbumRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableAlbumRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableAlbumRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlbumRelease(val *AlbumRelease) *NullableAlbumRelease {
	return &NullableAlbumRelease{value: val, isSet: true}
}

func (v NullableAlbumRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlbumRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


