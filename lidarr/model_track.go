/*
Lidarr

Lidarr API docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lidarr

import (
	"encoding/json"
)

// Track struct for Track
type Track struct {
	Id *int32 `json:"id,omitempty"`
	ForeignTrackId NullableString `json:"foreignTrackId,omitempty"`
	OldForeignTrackIds []*string `json:"oldForeignTrackIds,omitempty"`
	ForeignRecordingId NullableString `json:"foreignRecordingId,omitempty"`
	OldForeignRecordingIds []*string `json:"oldForeignRecordingIds,omitempty"`
	AlbumReleaseId *int32 `json:"albumReleaseId,omitempty"`
	ArtistMetadataId *int32 `json:"artistMetadataId,omitempty"`
	TrackNumber NullableString `json:"trackNumber,omitempty"`
	AbsoluteTrackNumber *int32 `json:"absoluteTrackNumber,omitempty"`
	Title NullableString `json:"title,omitempty"`
	Duration *int32 `json:"duration,omitempty"`
	Explicit *bool `json:"explicit,omitempty"`
	Ratings *Ratings `json:"ratings,omitempty"`
	MediumNumber *int32 `json:"mediumNumber,omitempty"`
	TrackFileId *int32 `json:"trackFileId,omitempty"`
	HasFile *bool `json:"hasFile,omitempty"`
	AlbumRelease *AlbumReleaseLazyLoaded `json:"albumRelease,omitempty"`
	ArtistMetadata *ArtistMetadataLazyLoaded `json:"artistMetadata,omitempty"`
	TrackFile *TrackFileLazyLoaded `json:"trackFile,omitempty"`
	Artist *ArtistLazyLoaded `json:"artist,omitempty"`
	AlbumId *int32 `json:"albumId,omitempty"`
	Album *Album `json:"album,omitempty"`
}

// NewTrack instantiates a new Track object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrack() *Track {
	this := Track{}
	return &this
}

// NewTrackWithDefaults instantiates a new Track object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackWithDefaults() *Track {
	this := Track{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Track) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Track) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Track) SetId(v int32) {
	o.Id = &v
}

// GetForeignTrackId returns the ForeignTrackId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Track) GetForeignTrackId() string {
	if o == nil || isNil(o.ForeignTrackId.Get()) {
		var ret string
		return ret
	}
	return *o.ForeignTrackId.Get()
}

// GetForeignTrackIdOk returns a tuple with the ForeignTrackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Track) GetForeignTrackIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ForeignTrackId.Get(), o.ForeignTrackId.IsSet()
}

// HasForeignTrackId returns a boolean if a field has been set.
func (o *Track) HasForeignTrackId() bool {
	if o != nil && o.ForeignTrackId.IsSet() {
		return true
	}

	return false
}

// SetForeignTrackId gets a reference to the given NullableString and assigns it to the ForeignTrackId field.
func (o *Track) SetForeignTrackId(v string) {
	o.ForeignTrackId.Set(&v)
}
// SetForeignTrackIdNil sets the value for ForeignTrackId to be an explicit nil
func (o *Track) SetForeignTrackIdNil() {
	o.ForeignTrackId.Set(nil)
}

// UnsetForeignTrackId ensures that no value is present for ForeignTrackId, not even an explicit nil
func (o *Track) UnsetForeignTrackId() {
	o.ForeignTrackId.Unset()
}

// GetOldForeignTrackIds returns the OldForeignTrackIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Track) GetOldForeignTrackIds() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.OldForeignTrackIds
}

// GetOldForeignTrackIdsOk returns a tuple with the OldForeignTrackIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Track) GetOldForeignTrackIdsOk() ([]*string, bool) {
	if o == nil || isNil(o.OldForeignTrackIds) {
    return nil, false
	}
	return o.OldForeignTrackIds, true
}

// HasOldForeignTrackIds returns a boolean if a field has been set.
func (o *Track) HasOldForeignTrackIds() bool {
	if o != nil && isNil(o.OldForeignTrackIds) {
		return true
	}

	return false
}

// SetOldForeignTrackIds gets a reference to the given []string and assigns it to the OldForeignTrackIds field.
func (o *Track) SetOldForeignTrackIds(v []*string) {
	o.OldForeignTrackIds = v
}

// GetForeignRecordingId returns the ForeignRecordingId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Track) GetForeignRecordingId() string {
	if o == nil || isNil(o.ForeignRecordingId.Get()) {
		var ret string
		return ret
	}
	return *o.ForeignRecordingId.Get()
}

// GetForeignRecordingIdOk returns a tuple with the ForeignRecordingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Track) GetForeignRecordingIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ForeignRecordingId.Get(), o.ForeignRecordingId.IsSet()
}

// HasForeignRecordingId returns a boolean if a field has been set.
func (o *Track) HasForeignRecordingId() bool {
	if o != nil && o.ForeignRecordingId.IsSet() {
		return true
	}

	return false
}

// SetForeignRecordingId gets a reference to the given NullableString and assigns it to the ForeignRecordingId field.
func (o *Track) SetForeignRecordingId(v string) {
	o.ForeignRecordingId.Set(&v)
}
// SetForeignRecordingIdNil sets the value for ForeignRecordingId to be an explicit nil
func (o *Track) SetForeignRecordingIdNil() {
	o.ForeignRecordingId.Set(nil)
}

// UnsetForeignRecordingId ensures that no value is present for ForeignRecordingId, not even an explicit nil
func (o *Track) UnsetForeignRecordingId() {
	o.ForeignRecordingId.Unset()
}

// GetOldForeignRecordingIds returns the OldForeignRecordingIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Track) GetOldForeignRecordingIds() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.OldForeignRecordingIds
}

// GetOldForeignRecordingIdsOk returns a tuple with the OldForeignRecordingIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Track) GetOldForeignRecordingIdsOk() ([]*string, bool) {
	if o == nil || isNil(o.OldForeignRecordingIds) {
    return nil, false
	}
	return o.OldForeignRecordingIds, true
}

// HasOldForeignRecordingIds returns a boolean if a field has been set.
func (o *Track) HasOldForeignRecordingIds() bool {
	if o != nil && isNil(o.OldForeignRecordingIds) {
		return true
	}

	return false
}

// SetOldForeignRecordingIds gets a reference to the given []string and assigns it to the OldForeignRecordingIds field.
func (o *Track) SetOldForeignRecordingIds(v []*string) {
	o.OldForeignRecordingIds = v
}

// GetAlbumReleaseId returns the AlbumReleaseId field value if set, zero value otherwise.
func (o *Track) GetAlbumReleaseId() int32 {
	if o == nil || isNil(o.AlbumReleaseId) {
		var ret int32
		return ret
	}
	return *o.AlbumReleaseId
}

// GetAlbumReleaseIdOk returns a tuple with the AlbumReleaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetAlbumReleaseIdOk() (*int32, bool) {
	if o == nil || isNil(o.AlbumReleaseId) {
    return nil, false
	}
	return o.AlbumReleaseId, true
}

// HasAlbumReleaseId returns a boolean if a field has been set.
func (o *Track) HasAlbumReleaseId() bool {
	if o != nil && !isNil(o.AlbumReleaseId) {
		return true
	}

	return false
}

// SetAlbumReleaseId gets a reference to the given int32 and assigns it to the AlbumReleaseId field.
func (o *Track) SetAlbumReleaseId(v int32) {
	o.AlbumReleaseId = &v
}

// GetArtistMetadataId returns the ArtistMetadataId field value if set, zero value otherwise.
func (o *Track) GetArtistMetadataId() int32 {
	if o == nil || isNil(o.ArtistMetadataId) {
		var ret int32
		return ret
	}
	return *o.ArtistMetadataId
}

// GetArtistMetadataIdOk returns a tuple with the ArtistMetadataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetArtistMetadataIdOk() (*int32, bool) {
	if o == nil || isNil(o.ArtistMetadataId) {
    return nil, false
	}
	return o.ArtistMetadataId, true
}

// HasArtistMetadataId returns a boolean if a field has been set.
func (o *Track) HasArtistMetadataId() bool {
	if o != nil && !isNil(o.ArtistMetadataId) {
		return true
	}

	return false
}

// SetArtistMetadataId gets a reference to the given int32 and assigns it to the ArtistMetadataId field.
func (o *Track) SetArtistMetadataId(v int32) {
	o.ArtistMetadataId = &v
}

// GetTrackNumber returns the TrackNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Track) GetTrackNumber() string {
	if o == nil || isNil(o.TrackNumber.Get()) {
		var ret string
		return ret
	}
	return *o.TrackNumber.Get()
}

// GetTrackNumberOk returns a tuple with the TrackNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Track) GetTrackNumberOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TrackNumber.Get(), o.TrackNumber.IsSet()
}

// HasTrackNumber returns a boolean if a field has been set.
func (o *Track) HasTrackNumber() bool {
	if o != nil && o.TrackNumber.IsSet() {
		return true
	}

	return false
}

// SetTrackNumber gets a reference to the given NullableString and assigns it to the TrackNumber field.
func (o *Track) SetTrackNumber(v string) {
	o.TrackNumber.Set(&v)
}
// SetTrackNumberNil sets the value for TrackNumber to be an explicit nil
func (o *Track) SetTrackNumberNil() {
	o.TrackNumber.Set(nil)
}

// UnsetTrackNumber ensures that no value is present for TrackNumber, not even an explicit nil
func (o *Track) UnsetTrackNumber() {
	o.TrackNumber.Unset()
}

// GetAbsoluteTrackNumber returns the AbsoluteTrackNumber field value if set, zero value otherwise.
func (o *Track) GetAbsoluteTrackNumber() int32 {
	if o == nil || isNil(o.AbsoluteTrackNumber) {
		var ret int32
		return ret
	}
	return *o.AbsoluteTrackNumber
}

// GetAbsoluteTrackNumberOk returns a tuple with the AbsoluteTrackNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetAbsoluteTrackNumberOk() (*int32, bool) {
	if o == nil || isNil(o.AbsoluteTrackNumber) {
    return nil, false
	}
	return o.AbsoluteTrackNumber, true
}

// HasAbsoluteTrackNumber returns a boolean if a field has been set.
func (o *Track) HasAbsoluteTrackNumber() bool {
	if o != nil && !isNil(o.AbsoluteTrackNumber) {
		return true
	}

	return false
}

// SetAbsoluteTrackNumber gets a reference to the given int32 and assigns it to the AbsoluteTrackNumber field.
func (o *Track) SetAbsoluteTrackNumber(v int32) {
	o.AbsoluteTrackNumber = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Track) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Track) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *Track) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *Track) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *Track) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *Track) UnsetTitle() {
	o.Title.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Track) GetDuration() int32 {
	if o == nil || isNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetDurationOk() (*int32, bool) {
	if o == nil || isNil(o.Duration) {
    return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Track) HasDuration() bool {
	if o != nil && !isNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *Track) SetDuration(v int32) {
	o.Duration = &v
}

// GetExplicit returns the Explicit field value if set, zero value otherwise.
func (o *Track) GetExplicit() bool {
	if o == nil || isNil(o.Explicit) {
		var ret bool
		return ret
	}
	return *o.Explicit
}

// GetExplicitOk returns a tuple with the Explicit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetExplicitOk() (*bool, bool) {
	if o == nil || isNil(o.Explicit) {
    return nil, false
	}
	return o.Explicit, true
}

// HasExplicit returns a boolean if a field has been set.
func (o *Track) HasExplicit() bool {
	if o != nil && !isNil(o.Explicit) {
		return true
	}

	return false
}

// SetExplicit gets a reference to the given bool and assigns it to the Explicit field.
func (o *Track) SetExplicit(v bool) {
	o.Explicit = &v
}

// GetRatings returns the Ratings field value if set, zero value otherwise.
func (o *Track) GetRatings() Ratings {
	if o == nil || isNil(o.Ratings) {
		var ret Ratings
		return ret
	}
	return *o.Ratings
}

// GetRatingsOk returns a tuple with the Ratings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetRatingsOk() (*Ratings, bool) {
	if o == nil || isNil(o.Ratings) {
    return nil, false
	}
	return o.Ratings, true
}

// HasRatings returns a boolean if a field has been set.
func (o *Track) HasRatings() bool {
	if o != nil && !isNil(o.Ratings) {
		return true
	}

	return false
}

// SetRatings gets a reference to the given Ratings and assigns it to the Ratings field.
func (o *Track) SetRatings(v Ratings) {
	o.Ratings = &v
}

// GetMediumNumber returns the MediumNumber field value if set, zero value otherwise.
func (o *Track) GetMediumNumber() int32 {
	if o == nil || isNil(o.MediumNumber) {
		var ret int32
		return ret
	}
	return *o.MediumNumber
}

// GetMediumNumberOk returns a tuple with the MediumNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetMediumNumberOk() (*int32, bool) {
	if o == nil || isNil(o.MediumNumber) {
    return nil, false
	}
	return o.MediumNumber, true
}

// HasMediumNumber returns a boolean if a field has been set.
func (o *Track) HasMediumNumber() bool {
	if o != nil && !isNil(o.MediumNumber) {
		return true
	}

	return false
}

// SetMediumNumber gets a reference to the given int32 and assigns it to the MediumNumber field.
func (o *Track) SetMediumNumber(v int32) {
	o.MediumNumber = &v
}

// GetTrackFileId returns the TrackFileId field value if set, zero value otherwise.
func (o *Track) GetTrackFileId() int32 {
	if o == nil || isNil(o.TrackFileId) {
		var ret int32
		return ret
	}
	return *o.TrackFileId
}

// GetTrackFileIdOk returns a tuple with the TrackFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetTrackFileIdOk() (*int32, bool) {
	if o == nil || isNil(o.TrackFileId) {
    return nil, false
	}
	return o.TrackFileId, true
}

// HasTrackFileId returns a boolean if a field has been set.
func (o *Track) HasTrackFileId() bool {
	if o != nil && !isNil(o.TrackFileId) {
		return true
	}

	return false
}

// SetTrackFileId gets a reference to the given int32 and assigns it to the TrackFileId field.
func (o *Track) SetTrackFileId(v int32) {
	o.TrackFileId = &v
}

// GetHasFile returns the HasFile field value if set, zero value otherwise.
func (o *Track) GetHasFile() bool {
	if o == nil || isNil(o.HasFile) {
		var ret bool
		return ret
	}
	return *o.HasFile
}

// GetHasFileOk returns a tuple with the HasFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetHasFileOk() (*bool, bool) {
	if o == nil || isNil(o.HasFile) {
    return nil, false
	}
	return o.HasFile, true
}

// HasHasFile returns a boolean if a field has been set.
func (o *Track) HasHasFile() bool {
	if o != nil && !isNil(o.HasFile) {
		return true
	}

	return false
}

// SetHasFile gets a reference to the given bool and assigns it to the HasFile field.
func (o *Track) SetHasFile(v bool) {
	o.HasFile = &v
}

// GetAlbumRelease returns the AlbumRelease field value if set, zero value otherwise.
func (o *Track) GetAlbumRelease() AlbumReleaseLazyLoaded {
	if o == nil || isNil(o.AlbumRelease) {
		var ret AlbumReleaseLazyLoaded
		return ret
	}
	return *o.AlbumRelease
}

// GetAlbumReleaseOk returns a tuple with the AlbumRelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetAlbumReleaseOk() (*AlbumReleaseLazyLoaded, bool) {
	if o == nil || isNil(o.AlbumRelease) {
    return nil, false
	}
	return o.AlbumRelease, true
}

// HasAlbumRelease returns a boolean if a field has been set.
func (o *Track) HasAlbumRelease() bool {
	if o != nil && !isNil(o.AlbumRelease) {
		return true
	}

	return false
}

// SetAlbumRelease gets a reference to the given AlbumReleaseLazyLoaded and assigns it to the AlbumRelease field.
func (o *Track) SetAlbumRelease(v AlbumReleaseLazyLoaded) {
	o.AlbumRelease = &v
}

// GetArtistMetadata returns the ArtistMetadata field value if set, zero value otherwise.
func (o *Track) GetArtistMetadata() ArtistMetadataLazyLoaded {
	if o == nil || isNil(o.ArtistMetadata) {
		var ret ArtistMetadataLazyLoaded
		return ret
	}
	return *o.ArtistMetadata
}

// GetArtistMetadataOk returns a tuple with the ArtistMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetArtistMetadataOk() (*ArtistMetadataLazyLoaded, bool) {
	if o == nil || isNil(o.ArtistMetadata) {
    return nil, false
	}
	return o.ArtistMetadata, true
}

// HasArtistMetadata returns a boolean if a field has been set.
func (o *Track) HasArtistMetadata() bool {
	if o != nil && !isNil(o.ArtistMetadata) {
		return true
	}

	return false
}

// SetArtistMetadata gets a reference to the given ArtistMetadataLazyLoaded and assigns it to the ArtistMetadata field.
func (o *Track) SetArtistMetadata(v ArtistMetadataLazyLoaded) {
	o.ArtistMetadata = &v
}

// GetTrackFile returns the TrackFile field value if set, zero value otherwise.
func (o *Track) GetTrackFile() TrackFileLazyLoaded {
	if o == nil || isNil(o.TrackFile) {
		var ret TrackFileLazyLoaded
		return ret
	}
	return *o.TrackFile
}

// GetTrackFileOk returns a tuple with the TrackFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetTrackFileOk() (*TrackFileLazyLoaded, bool) {
	if o == nil || isNil(o.TrackFile) {
    return nil, false
	}
	return o.TrackFile, true
}

// HasTrackFile returns a boolean if a field has been set.
func (o *Track) HasTrackFile() bool {
	if o != nil && !isNil(o.TrackFile) {
		return true
	}

	return false
}

// SetTrackFile gets a reference to the given TrackFileLazyLoaded and assigns it to the TrackFile field.
func (o *Track) SetTrackFile(v TrackFileLazyLoaded) {
	o.TrackFile = &v
}

// GetArtist returns the Artist field value if set, zero value otherwise.
func (o *Track) GetArtist() ArtistLazyLoaded {
	if o == nil || isNil(o.Artist) {
		var ret ArtistLazyLoaded
		return ret
	}
	return *o.Artist
}

// GetArtistOk returns a tuple with the Artist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetArtistOk() (*ArtistLazyLoaded, bool) {
	if o == nil || isNil(o.Artist) {
    return nil, false
	}
	return o.Artist, true
}

// HasArtist returns a boolean if a field has been set.
func (o *Track) HasArtist() bool {
	if o != nil && !isNil(o.Artist) {
		return true
	}

	return false
}

// SetArtist gets a reference to the given ArtistLazyLoaded and assigns it to the Artist field.
func (o *Track) SetArtist(v ArtistLazyLoaded) {
	o.Artist = &v
}

// GetAlbumId returns the AlbumId field value if set, zero value otherwise.
func (o *Track) GetAlbumId() int32 {
	if o == nil || isNil(o.AlbumId) {
		var ret int32
		return ret
	}
	return *o.AlbumId
}

// GetAlbumIdOk returns a tuple with the AlbumId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetAlbumIdOk() (*int32, bool) {
	if o == nil || isNil(o.AlbumId) {
    return nil, false
	}
	return o.AlbumId, true
}

// HasAlbumId returns a boolean if a field has been set.
func (o *Track) HasAlbumId() bool {
	if o != nil && !isNil(o.AlbumId) {
		return true
	}

	return false
}

// SetAlbumId gets a reference to the given int32 and assigns it to the AlbumId field.
func (o *Track) SetAlbumId(v int32) {
	o.AlbumId = &v
}

// GetAlbum returns the Album field value if set, zero value otherwise.
func (o *Track) GetAlbum() Album {
	if o == nil || isNil(o.Album) {
		var ret Album
		return ret
	}
	return *o.Album
}

// GetAlbumOk returns a tuple with the Album field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetAlbumOk() (*Album, bool) {
	if o == nil || isNil(o.Album) {
    return nil, false
	}
	return o.Album, true
}

// HasAlbum returns a boolean if a field has been set.
func (o *Track) HasAlbum() bool {
	if o != nil && !isNil(o.Album) {
		return true
	}

	return false
}

// SetAlbum gets a reference to the given Album and assigns it to the Album field.
func (o *Track) SetAlbum(v Album) {
	o.Album = &v
}

func (o Track) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ForeignTrackId.IsSet() {
		toSerialize["foreignTrackId"] = o.ForeignTrackId.Get()
	}
	if o.OldForeignTrackIds != nil {
		toSerialize["oldForeignTrackIds"] = o.OldForeignTrackIds
	}
	if o.ForeignRecordingId.IsSet() {
		toSerialize["foreignRecordingId"] = o.ForeignRecordingId.Get()
	}
	if o.OldForeignRecordingIds != nil {
		toSerialize["oldForeignRecordingIds"] = o.OldForeignRecordingIds
	}
	if !isNil(o.AlbumReleaseId) {
		toSerialize["albumReleaseId"] = o.AlbumReleaseId
	}
	if !isNil(o.ArtistMetadataId) {
		toSerialize["artistMetadataId"] = o.ArtistMetadataId
	}
	if o.TrackNumber.IsSet() {
		toSerialize["trackNumber"] = o.TrackNumber.Get()
	}
	if !isNil(o.AbsoluteTrackNumber) {
		toSerialize["absoluteTrackNumber"] = o.AbsoluteTrackNumber
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if !isNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !isNil(o.Explicit) {
		toSerialize["explicit"] = o.Explicit
	}
	if !isNil(o.Ratings) {
		toSerialize["ratings"] = o.Ratings
	}
	if !isNil(o.MediumNumber) {
		toSerialize["mediumNumber"] = o.MediumNumber
	}
	if !isNil(o.TrackFileId) {
		toSerialize["trackFileId"] = o.TrackFileId
	}
	if !isNil(o.HasFile) {
		toSerialize["hasFile"] = o.HasFile
	}
	if !isNil(o.AlbumRelease) {
		toSerialize["albumRelease"] = o.AlbumRelease
	}
	if !isNil(o.ArtistMetadata) {
		toSerialize["artistMetadata"] = o.ArtistMetadata
	}
	if !isNil(o.TrackFile) {
		toSerialize["trackFile"] = o.TrackFile
	}
	if !isNil(o.Artist) {
		toSerialize["artist"] = o.Artist
	}
	if !isNil(o.AlbumId) {
		toSerialize["albumId"] = o.AlbumId
	}
	if !isNil(o.Album) {
		toSerialize["album"] = o.Album
	}
	return json.Marshal(toSerialize)
}

type NullableTrack struct {
	value *Track
	isSet bool
}

func (v NullableTrack) Get() *Track {
	return v.value
}

func (v *NullableTrack) Set(val *Track) {
	v.value = val
	v.isSet = true
}

func (v NullableTrack) IsSet() bool {
	return v.isSet
}

func (v *NullableTrack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrack(val *Track) *NullableTrack {
	return &NullableTrack{value: val, isSet: true}
}

func (v NullableTrack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


