/*
Lidarr

Lidarr API docs

API version: v2.5.3.4341
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lidarr

import (
	"encoding/json"
	"fmt"
)

// ArtistStatusType the model 'ArtistStatusType'
type ArtistStatusType string

// List of ArtistStatusType
const (
	ARTISTSTATUSTYPE_CONTINUING ArtistStatusType = "continuing"
	ARTISTSTATUSTYPE_ENDED ArtistStatusType = "ended"
)

// All allowed values of ArtistStatusType enum
var AllowedArtistStatusTypeEnumValues = []ArtistStatusType{
	"continuing",
	"ended",
}

func (v *ArtistStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ArtistStatusType(value)
	for _, existing := range AllowedArtistStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ArtistStatusType", value)
}

// NewArtistStatusTypeFromValue returns a pointer to a valid ArtistStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewArtistStatusTypeFromValue(v string) (*ArtistStatusType, error) {
	ev := ArtistStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ArtistStatusType: valid values are %v", v, AllowedArtistStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ArtistStatusType) IsValid() bool {
	for _, existing := range AllowedArtistStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ArtistStatusType value
func (v ArtistStatusType) Ptr() *ArtistStatusType {
	return &v
}

type NullableArtistStatusType struct {
	value *ArtistStatusType
	isSet bool
}

func (v NullableArtistStatusType) Get() *ArtistStatusType {
	return v.value
}

func (v *NullableArtistStatusType) Set(val *ArtistStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableArtistStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableArtistStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtistStatusType(val *ArtistStatusType) *NullableArtistStatusType {
	return &NullableArtistStatusType{value: val, isSet: true}
}

func (v NullableArtistStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtistStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

