/*
Lidarr

Lidarr API docs

API version: v2.13.3.4711
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lidarr

import (
	"encoding/json"
)

// checks if the ManualImportResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManualImportResource{}

// ManualImportResource struct for ManualImportResource
type ManualImportResource struct {
	Id *int32 `json:"id,omitempty"`
	Path NullableString `json:"path,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Artist *ArtistResource `json:"artist,omitempty"`
	Album *AlbumResource `json:"album,omitempty"`
	AlbumReleaseId *int32 `json:"albumReleaseId,omitempty"`
	Tracks []TrackResource `json:"tracks,omitempty"`
	Quality *QualityModel `json:"quality,omitempty"`
	ReleaseGroup NullableString `json:"releaseGroup,omitempty"`
	QualityWeight *int32 `json:"qualityWeight,omitempty"`
	DownloadId NullableString `json:"downloadId,omitempty"`
	IndexerFlags *int32 `json:"indexerFlags,omitempty"`
	Rejections []Rejection `json:"rejections,omitempty"`
	AudioTags *ParsedTrackInfo `json:"audioTags,omitempty"`
	AdditionalFile *bool `json:"additionalFile,omitempty"`
	ReplaceExistingFiles *bool `json:"replaceExistingFiles,omitempty"`
	DisableReleaseSwitching *bool `json:"disableReleaseSwitching,omitempty"`
}

// NewManualImportResource instantiates a new ManualImportResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualImportResource() *ManualImportResource {
	this := ManualImportResource{}
	return &this
}

// NewManualImportResourceWithDefaults instantiates a new ManualImportResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualImportResourceWithDefaults() *ManualImportResource {
	this := ManualImportResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManualImportResource) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManualImportResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ManualImportResource) SetId(v int32) {
	o.Id = &v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualImportResource) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualImportResource) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *ManualImportResource) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *ManualImportResource) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *ManualImportResource) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *ManualImportResource) UnsetPath() {
	o.Path.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualImportResource) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualImportResource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ManualImportResource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ManualImportResource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ManualImportResource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ManualImportResource) UnsetName() {
	o.Name.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ManualImportResource) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ManualImportResource) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *ManualImportResource) SetSize(v int64) {
	o.Size = &v
}

// GetArtist returns the Artist field value if set, zero value otherwise.
func (o *ManualImportResource) GetArtist() ArtistResource {
	if o == nil || IsNil(o.Artist) {
		var ret ArtistResource
		return ret
	}
	return *o.Artist
}

// GetArtistOk returns a tuple with the Artist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetArtistOk() (*ArtistResource, bool) {
	if o == nil || IsNil(o.Artist) {
		return nil, false
	}
	return o.Artist, true
}

// HasArtist returns a boolean if a field has been set.
func (o *ManualImportResource) HasArtist() bool {
	if o != nil && !IsNil(o.Artist) {
		return true
	}

	return false
}

// SetArtist gets a reference to the given ArtistResource and assigns it to the Artist field.
func (o *ManualImportResource) SetArtist(v ArtistResource) {
	o.Artist = &v
}

// GetAlbum returns the Album field value if set, zero value otherwise.
func (o *ManualImportResource) GetAlbum() AlbumResource {
	if o == nil || IsNil(o.Album) {
		var ret AlbumResource
		return ret
	}
	return *o.Album
}

// GetAlbumOk returns a tuple with the Album field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetAlbumOk() (*AlbumResource, bool) {
	if o == nil || IsNil(o.Album) {
		return nil, false
	}
	return o.Album, true
}

// HasAlbum returns a boolean if a field has been set.
func (o *ManualImportResource) HasAlbum() bool {
	if o != nil && !IsNil(o.Album) {
		return true
	}

	return false
}

// SetAlbum gets a reference to the given AlbumResource and assigns it to the Album field.
func (o *ManualImportResource) SetAlbum(v AlbumResource) {
	o.Album = &v
}

// GetAlbumReleaseId returns the AlbumReleaseId field value if set, zero value otherwise.
func (o *ManualImportResource) GetAlbumReleaseId() int32 {
	if o == nil || IsNil(o.AlbumReleaseId) {
		var ret int32
		return ret
	}
	return *o.AlbumReleaseId
}

// GetAlbumReleaseIdOk returns a tuple with the AlbumReleaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetAlbumReleaseIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AlbumReleaseId) {
		return nil, false
	}
	return o.AlbumReleaseId, true
}

// HasAlbumReleaseId returns a boolean if a field has been set.
func (o *ManualImportResource) HasAlbumReleaseId() bool {
	if o != nil && !IsNil(o.AlbumReleaseId) {
		return true
	}

	return false
}

// SetAlbumReleaseId gets a reference to the given int32 and assigns it to the AlbumReleaseId field.
func (o *ManualImportResource) SetAlbumReleaseId(v int32) {
	o.AlbumReleaseId = &v
}

// GetTracks returns the Tracks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualImportResource) GetTracks() []TrackResource {
	if o == nil {
		var ret []TrackResource
		return ret
	}
	return o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualImportResource) GetTracksOk() ([]TrackResource, bool) {
	if o == nil || IsNil(o.Tracks) {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *ManualImportResource) HasTracks() bool {
	if o != nil && !IsNil(o.Tracks) {
		return true
	}

	return false
}

// SetTracks gets a reference to the given []TrackResource and assigns it to the Tracks field.
func (o *ManualImportResource) SetTracks(v []TrackResource) {
	o.Tracks = v
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *ManualImportResource) GetQuality() QualityModel {
	if o == nil || IsNil(o.Quality) {
		var ret QualityModel
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetQualityOk() (*QualityModel, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *ManualImportResource) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given QualityModel and assigns it to the Quality field.
func (o *ManualImportResource) SetQuality(v QualityModel) {
	o.Quality = &v
}

// GetReleaseGroup returns the ReleaseGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualImportResource) GetReleaseGroup() string {
	if o == nil || IsNil(o.ReleaseGroup.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseGroup.Get()
}

// GetReleaseGroupOk returns a tuple with the ReleaseGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualImportResource) GetReleaseGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseGroup.Get(), o.ReleaseGroup.IsSet()
}

// HasReleaseGroup returns a boolean if a field has been set.
func (o *ManualImportResource) HasReleaseGroup() bool {
	if o != nil && o.ReleaseGroup.IsSet() {
		return true
	}

	return false
}

// SetReleaseGroup gets a reference to the given NullableString and assigns it to the ReleaseGroup field.
func (o *ManualImportResource) SetReleaseGroup(v string) {
	o.ReleaseGroup.Set(&v)
}
// SetReleaseGroupNil sets the value for ReleaseGroup to be an explicit nil
func (o *ManualImportResource) SetReleaseGroupNil() {
	o.ReleaseGroup.Set(nil)
}

// UnsetReleaseGroup ensures that no value is present for ReleaseGroup, not even an explicit nil
func (o *ManualImportResource) UnsetReleaseGroup() {
	o.ReleaseGroup.Unset()
}

// GetQualityWeight returns the QualityWeight field value if set, zero value otherwise.
func (o *ManualImportResource) GetQualityWeight() int32 {
	if o == nil || IsNil(o.QualityWeight) {
		var ret int32
		return ret
	}
	return *o.QualityWeight
}

// GetQualityWeightOk returns a tuple with the QualityWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetQualityWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.QualityWeight) {
		return nil, false
	}
	return o.QualityWeight, true
}

// HasQualityWeight returns a boolean if a field has been set.
func (o *ManualImportResource) HasQualityWeight() bool {
	if o != nil && !IsNil(o.QualityWeight) {
		return true
	}

	return false
}

// SetQualityWeight gets a reference to the given int32 and assigns it to the QualityWeight field.
func (o *ManualImportResource) SetQualityWeight(v int32) {
	o.QualityWeight = &v
}

// GetDownloadId returns the DownloadId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualImportResource) GetDownloadId() string {
	if o == nil || IsNil(o.DownloadId.Get()) {
		var ret string
		return ret
	}
	return *o.DownloadId.Get()
}

// GetDownloadIdOk returns a tuple with the DownloadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualImportResource) GetDownloadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadId.Get(), o.DownloadId.IsSet()
}

// HasDownloadId returns a boolean if a field has been set.
func (o *ManualImportResource) HasDownloadId() bool {
	if o != nil && o.DownloadId.IsSet() {
		return true
	}

	return false
}

// SetDownloadId gets a reference to the given NullableString and assigns it to the DownloadId field.
func (o *ManualImportResource) SetDownloadId(v string) {
	o.DownloadId.Set(&v)
}
// SetDownloadIdNil sets the value for DownloadId to be an explicit nil
func (o *ManualImportResource) SetDownloadIdNil() {
	o.DownloadId.Set(nil)
}

// UnsetDownloadId ensures that no value is present for DownloadId, not even an explicit nil
func (o *ManualImportResource) UnsetDownloadId() {
	o.DownloadId.Unset()
}

// GetIndexerFlags returns the IndexerFlags field value if set, zero value otherwise.
func (o *ManualImportResource) GetIndexerFlags() int32 {
	if o == nil || IsNil(o.IndexerFlags) {
		var ret int32
		return ret
	}
	return *o.IndexerFlags
}

// GetIndexerFlagsOk returns a tuple with the IndexerFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetIndexerFlagsOk() (*int32, bool) {
	if o == nil || IsNil(o.IndexerFlags) {
		return nil, false
	}
	return o.IndexerFlags, true
}

// HasIndexerFlags returns a boolean if a field has been set.
func (o *ManualImportResource) HasIndexerFlags() bool {
	if o != nil && !IsNil(o.IndexerFlags) {
		return true
	}

	return false
}

// SetIndexerFlags gets a reference to the given int32 and assigns it to the IndexerFlags field.
func (o *ManualImportResource) SetIndexerFlags(v int32) {
	o.IndexerFlags = &v
}

// GetRejections returns the Rejections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualImportResource) GetRejections() []Rejection {
	if o == nil {
		var ret []Rejection
		return ret
	}
	return o.Rejections
}

// GetRejectionsOk returns a tuple with the Rejections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualImportResource) GetRejectionsOk() ([]Rejection, bool) {
	if o == nil || IsNil(o.Rejections) {
		return nil, false
	}
	return o.Rejections, true
}

// HasRejections returns a boolean if a field has been set.
func (o *ManualImportResource) HasRejections() bool {
	if o != nil && !IsNil(o.Rejections) {
		return true
	}

	return false
}

// SetRejections gets a reference to the given []Rejection and assigns it to the Rejections field.
func (o *ManualImportResource) SetRejections(v []Rejection) {
	o.Rejections = v
}

// GetAudioTags returns the AudioTags field value if set, zero value otherwise.
func (o *ManualImportResource) GetAudioTags() ParsedTrackInfo {
	if o == nil || IsNil(o.AudioTags) {
		var ret ParsedTrackInfo
		return ret
	}
	return *o.AudioTags
}

// GetAudioTagsOk returns a tuple with the AudioTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetAudioTagsOk() (*ParsedTrackInfo, bool) {
	if o == nil || IsNil(o.AudioTags) {
		return nil, false
	}
	return o.AudioTags, true
}

// HasAudioTags returns a boolean if a field has been set.
func (o *ManualImportResource) HasAudioTags() bool {
	if o != nil && !IsNil(o.AudioTags) {
		return true
	}

	return false
}

// SetAudioTags gets a reference to the given ParsedTrackInfo and assigns it to the AudioTags field.
func (o *ManualImportResource) SetAudioTags(v ParsedTrackInfo) {
	o.AudioTags = &v
}

// GetAdditionalFile returns the AdditionalFile field value if set, zero value otherwise.
func (o *ManualImportResource) GetAdditionalFile() bool {
	if o == nil || IsNil(o.AdditionalFile) {
		var ret bool
		return ret
	}
	return *o.AdditionalFile
}

// GetAdditionalFileOk returns a tuple with the AdditionalFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetAdditionalFileOk() (*bool, bool) {
	if o == nil || IsNil(o.AdditionalFile) {
		return nil, false
	}
	return o.AdditionalFile, true
}

// HasAdditionalFile returns a boolean if a field has been set.
func (o *ManualImportResource) HasAdditionalFile() bool {
	if o != nil && !IsNil(o.AdditionalFile) {
		return true
	}

	return false
}

// SetAdditionalFile gets a reference to the given bool and assigns it to the AdditionalFile field.
func (o *ManualImportResource) SetAdditionalFile(v bool) {
	o.AdditionalFile = &v
}

// GetReplaceExistingFiles returns the ReplaceExistingFiles field value if set, zero value otherwise.
func (o *ManualImportResource) GetReplaceExistingFiles() bool {
	if o == nil || IsNil(o.ReplaceExistingFiles) {
		var ret bool
		return ret
	}
	return *o.ReplaceExistingFiles
}

// GetReplaceExistingFilesOk returns a tuple with the ReplaceExistingFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetReplaceExistingFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplaceExistingFiles) {
		return nil, false
	}
	return o.ReplaceExistingFiles, true
}

// HasReplaceExistingFiles returns a boolean if a field has been set.
func (o *ManualImportResource) HasReplaceExistingFiles() bool {
	if o != nil && !IsNil(o.ReplaceExistingFiles) {
		return true
	}

	return false
}

// SetReplaceExistingFiles gets a reference to the given bool and assigns it to the ReplaceExistingFiles field.
func (o *ManualImportResource) SetReplaceExistingFiles(v bool) {
	o.ReplaceExistingFiles = &v
}

// GetDisableReleaseSwitching returns the DisableReleaseSwitching field value if set, zero value otherwise.
func (o *ManualImportResource) GetDisableReleaseSwitching() bool {
	if o == nil || IsNil(o.DisableReleaseSwitching) {
		var ret bool
		return ret
	}
	return *o.DisableReleaseSwitching
}

// GetDisableReleaseSwitchingOk returns a tuple with the DisableReleaseSwitching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualImportResource) GetDisableReleaseSwitchingOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableReleaseSwitching) {
		return nil, false
	}
	return o.DisableReleaseSwitching, true
}

// HasDisableReleaseSwitching returns a boolean if a field has been set.
func (o *ManualImportResource) HasDisableReleaseSwitching() bool {
	if o != nil && !IsNil(o.DisableReleaseSwitching) {
		return true
	}

	return false
}

// SetDisableReleaseSwitching gets a reference to the given bool and assigns it to the DisableReleaseSwitching field.
func (o *ManualImportResource) SetDisableReleaseSwitching(v bool) {
	o.DisableReleaseSwitching = &v
}

func (o ManualImportResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManualImportResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Artist) {
		toSerialize["artist"] = o.Artist
	}
	if !IsNil(o.Album) {
		toSerialize["album"] = o.Album
	}
	if !IsNil(o.AlbumReleaseId) {
		toSerialize["albumReleaseId"] = o.AlbumReleaseId
	}
	if o.Tracks != nil {
		toSerialize["tracks"] = o.Tracks
	}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if o.ReleaseGroup.IsSet() {
		toSerialize["releaseGroup"] = o.ReleaseGroup.Get()
	}
	if !IsNil(o.QualityWeight) {
		toSerialize["qualityWeight"] = o.QualityWeight
	}
	if o.DownloadId.IsSet() {
		toSerialize["downloadId"] = o.DownloadId.Get()
	}
	if !IsNil(o.IndexerFlags) {
		toSerialize["indexerFlags"] = o.IndexerFlags
	}
	if o.Rejections != nil {
		toSerialize["rejections"] = o.Rejections
	}
	if !IsNil(o.AudioTags) {
		toSerialize["audioTags"] = o.AudioTags
	}
	if !IsNil(o.AdditionalFile) {
		toSerialize["additionalFile"] = o.AdditionalFile
	}
	if !IsNil(o.ReplaceExistingFiles) {
		toSerialize["replaceExistingFiles"] = o.ReplaceExistingFiles
	}
	if !IsNil(o.DisableReleaseSwitching) {
		toSerialize["disableReleaseSwitching"] = o.DisableReleaseSwitching
	}
	return toSerialize, nil
}

type NullableManualImportResource struct {
	value *ManualImportResource
	isSet bool
}

func (v NullableManualImportResource) Get() *ManualImportResource {
	return v.value
}

func (v *NullableManualImportResource) Set(val *ManualImportResource) {
	v.value = val
	v.isSet = true
}

func (v NullableManualImportResource) IsSet() bool {
	return v.isSet
}

func (v *NullableManualImportResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualImportResource(val *ManualImportResource) *NullableManualImportResource {
	return &NullableManualImportResource{value: val, isSet: true}
}

func (v NullableManualImportResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualImportResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


