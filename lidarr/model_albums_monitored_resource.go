/*
Lidarr

Lidarr API docs

API version: v2.9.6.4552
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lidarr

import (
	"encoding/json"
)

// checks if the AlbumsMonitoredResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlbumsMonitoredResource{}

// AlbumsMonitoredResource struct for AlbumsMonitoredResource
type AlbumsMonitoredResource struct {
	AlbumIds []int32 `json:"albumIds,omitempty"`
	Monitored *bool `json:"monitored,omitempty"`
}

// NewAlbumsMonitoredResource instantiates a new AlbumsMonitoredResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlbumsMonitoredResource() *AlbumsMonitoredResource {
	this := AlbumsMonitoredResource{}
	return &this
}

// NewAlbumsMonitoredResourceWithDefaults instantiates a new AlbumsMonitoredResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlbumsMonitoredResourceWithDefaults() *AlbumsMonitoredResource {
	this := AlbumsMonitoredResource{}
	return &this
}

// GetAlbumIds returns the AlbumIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlbumsMonitoredResource) GetAlbumIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.AlbumIds
}

// GetAlbumIdsOk returns a tuple with the AlbumIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumsMonitoredResource) GetAlbumIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.AlbumIds) {
		return nil, false
	}
	return o.AlbumIds, true
}

// HasAlbumIds returns a boolean if a field has been set.
func (o *AlbumsMonitoredResource) HasAlbumIds() bool {
	if o != nil && !IsNil(o.AlbumIds) {
		return true
	}

	return false
}

// SetAlbumIds gets a reference to the given []int32 and assigns it to the AlbumIds field.
func (o *AlbumsMonitoredResource) SetAlbumIds(v []int32) {
	o.AlbumIds = v
}

// GetMonitored returns the Monitored field value if set, zero value otherwise.
func (o *AlbumsMonitoredResource) GetMonitored() bool {
	if o == nil || IsNil(o.Monitored) {
		var ret bool
		return ret
	}
	return *o.Monitored
}

// GetMonitoredOk returns a tuple with the Monitored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumsMonitoredResource) GetMonitoredOk() (*bool, bool) {
	if o == nil || IsNil(o.Monitored) {
		return nil, false
	}
	return o.Monitored, true
}

// HasMonitored returns a boolean if a field has been set.
func (o *AlbumsMonitoredResource) HasMonitored() bool {
	if o != nil && !IsNil(o.Monitored) {
		return true
	}

	return false
}

// SetMonitored gets a reference to the given bool and assigns it to the Monitored field.
func (o *AlbumsMonitoredResource) SetMonitored(v bool) {
	o.Monitored = &v
}

func (o AlbumsMonitoredResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlbumsMonitoredResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AlbumIds != nil {
		toSerialize["albumIds"] = o.AlbumIds
	}
	if !IsNil(o.Monitored) {
		toSerialize["monitored"] = o.Monitored
	}
	return toSerialize, nil
}

type NullableAlbumsMonitoredResource struct {
	value *AlbumsMonitoredResource
	isSet bool
}

func (v NullableAlbumsMonitoredResource) Get() *AlbumsMonitoredResource {
	return v.value
}

func (v *NullableAlbumsMonitoredResource) Set(val *AlbumsMonitoredResource) {
	v.value = val
	v.isSet = true
}

func (v NullableAlbumsMonitoredResource) IsSet() bool {
	return v.isSet
}

func (v *NullableAlbumsMonitoredResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlbumsMonitoredResource(val *AlbumsMonitoredResource) *NullableAlbumsMonitoredResource {
	return &NullableAlbumsMonitoredResource{value: val, isSet: true}
}

func (v NullableAlbumsMonitoredResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlbumsMonitoredResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


