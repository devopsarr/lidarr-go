/*
Lidarr

Lidarr API docs

API version: v2.2.5.4141
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lidarr

import (
	"encoding/json"
)

// checks if the TrackFileListResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackFileListResource{}

// TrackFileListResource struct for TrackFileListResource
type TrackFileListResource struct {
	TrackFileIds []int32 `json:"trackFileIds,omitempty"`
	Quality *QualityModel `json:"quality,omitempty"`
	SceneName NullableString `json:"sceneName,omitempty"`
	ReleaseGroup NullableString `json:"releaseGroup,omitempty"`
}

// NewTrackFileListResource instantiates a new TrackFileListResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackFileListResource() *TrackFileListResource {
	this := TrackFileListResource{}
	return &this
}

// NewTrackFileListResourceWithDefaults instantiates a new TrackFileListResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackFileListResourceWithDefaults() *TrackFileListResource {
	this := TrackFileListResource{}
	return &this
}

// GetTrackFileIds returns the TrackFileIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrackFileListResource) GetTrackFileIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.TrackFileIds
}

// GetTrackFileIdsOk returns a tuple with the TrackFileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrackFileListResource) GetTrackFileIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.TrackFileIds) {
		return nil, false
	}
	return o.TrackFileIds, true
}

// HasTrackFileIds returns a boolean if a field has been set.
func (o *TrackFileListResource) HasTrackFileIds() bool {
	if o != nil && !IsNil(o.TrackFileIds) {
		return true
	}

	return false
}

// SetTrackFileIds gets a reference to the given []int32 and assigns it to the TrackFileIds field.
func (o *TrackFileListResource) SetTrackFileIds(v []int32) {
	o.TrackFileIds = v
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *TrackFileListResource) GetQuality() QualityModel {
	if o == nil || IsNil(o.Quality) {
		var ret QualityModel
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackFileListResource) GetQualityOk() (*QualityModel, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *TrackFileListResource) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given QualityModel and assigns it to the Quality field.
func (o *TrackFileListResource) SetQuality(v QualityModel) {
	o.Quality = &v
}

// GetSceneName returns the SceneName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrackFileListResource) GetSceneName() string {
	if o == nil || IsNil(o.SceneName.Get()) {
		var ret string
		return ret
	}
	return *o.SceneName.Get()
}

// GetSceneNameOk returns a tuple with the SceneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrackFileListResource) GetSceneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SceneName.Get(), o.SceneName.IsSet()
}

// HasSceneName returns a boolean if a field has been set.
func (o *TrackFileListResource) HasSceneName() bool {
	if o != nil && o.SceneName.IsSet() {
		return true
	}

	return false
}

// SetSceneName gets a reference to the given NullableString and assigns it to the SceneName field.
func (o *TrackFileListResource) SetSceneName(v string) {
	o.SceneName.Set(&v)
}
// SetSceneNameNil sets the value for SceneName to be an explicit nil
func (o *TrackFileListResource) SetSceneNameNil() {
	o.SceneName.Set(nil)
}

// UnsetSceneName ensures that no value is present for SceneName, not even an explicit nil
func (o *TrackFileListResource) UnsetSceneName() {
	o.SceneName.Unset()
}

// GetReleaseGroup returns the ReleaseGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrackFileListResource) GetReleaseGroup() string {
	if o == nil || IsNil(o.ReleaseGroup.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseGroup.Get()
}

// GetReleaseGroupOk returns a tuple with the ReleaseGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrackFileListResource) GetReleaseGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseGroup.Get(), o.ReleaseGroup.IsSet()
}

// HasReleaseGroup returns a boolean if a field has been set.
func (o *TrackFileListResource) HasReleaseGroup() bool {
	if o != nil && o.ReleaseGroup.IsSet() {
		return true
	}

	return false
}

// SetReleaseGroup gets a reference to the given NullableString and assigns it to the ReleaseGroup field.
func (o *TrackFileListResource) SetReleaseGroup(v string) {
	o.ReleaseGroup.Set(&v)
}
// SetReleaseGroupNil sets the value for ReleaseGroup to be an explicit nil
func (o *TrackFileListResource) SetReleaseGroupNil() {
	o.ReleaseGroup.Set(nil)
}

// UnsetReleaseGroup ensures that no value is present for ReleaseGroup, not even an explicit nil
func (o *TrackFileListResource) UnsetReleaseGroup() {
	o.ReleaseGroup.Unset()
}

func (o TrackFileListResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackFileListResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TrackFileIds != nil {
		toSerialize["trackFileIds"] = o.TrackFileIds
	}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if o.SceneName.IsSet() {
		toSerialize["sceneName"] = o.SceneName.Get()
	}
	if o.ReleaseGroup.IsSet() {
		toSerialize["releaseGroup"] = o.ReleaseGroup.Get()
	}
	return toSerialize, nil
}

type NullableTrackFileListResource struct {
	value *TrackFileListResource
	isSet bool
}

func (v NullableTrackFileListResource) Get() *TrackFileListResource {
	return v.value
}

func (v *NullableTrackFileListResource) Set(val *TrackFileListResource) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackFileListResource) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackFileListResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackFileListResource(val *TrackFileListResource) *NullableTrackFileListResource {
	return &NullableTrackFileListResource{value: val, isSet: true}
}

func (v NullableTrackFileListResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackFileListResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


